/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteImport } from './routes/home'
import { Route as PsPsRouteRouteImport } from './routes/ps-ps/route'
import { Route as MsrRouteRouteImport } from './routes/msr/route'
import { Route as PsPsVendorAssignmentRouteImport } from './routes/ps-ps/vendor-assignment'
import { Route as PsPsPipsRouteImport } from './routes/ps-ps/pips'
import { Route as PsPsItemAssignmentRouteImport } from './routes/ps-ps/item-assignment'

const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const PsPsRouteRoute = PsPsRouteRouteImport.update({
  id: '/ps-ps',
  path: '/ps-ps',
  getParentRoute: () => rootRouteImport,
} as any)
const MsrRouteRoute = MsrRouteRouteImport.update({
  id: '/msr',
  path: '/msr',
  getParentRoute: () => rootRouteImport,
} as any)
const PsPsVendorAssignmentRoute = PsPsVendorAssignmentRouteImport.update({
  id: '/vendor-assignment',
  path: '/vendor-assignment',
  getParentRoute: () => PsPsRouteRoute,
} as any)
const PsPsPipsRoute = PsPsPipsRouteImport.update({
  id: '/pips',
  path: '/pips',
  getParentRoute: () => PsPsRouteRoute,
} as any)
const PsPsItemAssignmentRoute = PsPsItemAssignmentRouteImport.update({
  id: '/item-assignment',
  path: '/item-assignment',
  getParentRoute: () => PsPsRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/msr': typeof MsrRouteRoute
  '/ps-ps': typeof PsPsRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/ps-ps/item-assignment': typeof PsPsItemAssignmentRoute
  '/ps-ps/pips': typeof PsPsPipsRoute
  '/ps-ps/vendor-assignment': typeof PsPsVendorAssignmentRoute
}
export interface FileRoutesByTo {
  '/msr': typeof MsrRouteRoute
  '/ps-ps': typeof PsPsRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/ps-ps/item-assignment': typeof PsPsItemAssignmentRoute
  '/ps-ps/pips': typeof PsPsPipsRoute
  '/ps-ps/vendor-assignment': typeof PsPsVendorAssignmentRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/msr': typeof MsrRouteRoute
  '/ps-ps': typeof PsPsRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/ps-ps/item-assignment': typeof PsPsItemAssignmentRoute
  '/ps-ps/pips': typeof PsPsPipsRoute
  '/ps-ps/vendor-assignment': typeof PsPsVendorAssignmentRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/msr'
    | '/ps-ps'
    | '/home'
    | '/ps-ps/item-assignment'
    | '/ps-ps/pips'
    | '/ps-ps/vendor-assignment'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/msr'
    | '/ps-ps'
    | '/home'
    | '/ps-ps/item-assignment'
    | '/ps-ps/pips'
    | '/ps-ps/vendor-assignment'
  id:
    | '__root__'
    | '/msr'
    | '/ps-ps'
    | '/home'
    | '/ps-ps/item-assignment'
    | '/ps-ps/pips'
    | '/ps-ps/vendor-assignment'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MsrRouteRoute: typeof MsrRouteRoute
  PsPsRouteRoute: typeof PsPsRouteRouteWithChildren
  HomeRoute: typeof HomeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ps-ps': {
      id: '/ps-ps'
      path: '/ps-ps'
      fullPath: '/ps-ps'
      preLoaderRoute: typeof PsPsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/msr': {
      id: '/msr'
      path: '/msr'
      fullPath: '/msr'
      preLoaderRoute: typeof MsrRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ps-ps/vendor-assignment': {
      id: '/ps-ps/vendor-assignment'
      path: '/vendor-assignment'
      fullPath: '/ps-ps/vendor-assignment'
      preLoaderRoute: typeof PsPsVendorAssignmentRouteImport
      parentRoute: typeof PsPsRouteRoute
    }
    '/ps-ps/pips': {
      id: '/ps-ps/pips'
      path: '/pips'
      fullPath: '/ps-ps/pips'
      preLoaderRoute: typeof PsPsPipsRouteImport
      parentRoute: typeof PsPsRouteRoute
    }
    '/ps-ps/item-assignment': {
      id: '/ps-ps/item-assignment'
      path: '/item-assignment'
      fullPath: '/ps-ps/item-assignment'
      preLoaderRoute: typeof PsPsItemAssignmentRouteImport
      parentRoute: typeof PsPsRouteRoute
    }
  }
}

interface PsPsRouteRouteChildren {
  PsPsItemAssignmentRoute: typeof PsPsItemAssignmentRoute
  PsPsPipsRoute: typeof PsPsPipsRoute
  PsPsVendorAssignmentRoute: typeof PsPsVendorAssignmentRoute
}

const PsPsRouteRouteChildren: PsPsRouteRouteChildren = {
  PsPsItemAssignmentRoute: PsPsItemAssignmentRoute,
  PsPsPipsRoute: PsPsPipsRoute,
  PsPsVendorAssignmentRoute: PsPsVendorAssignmentRoute,
}

const PsPsRouteRouteWithChildren = PsPsRouteRoute._addFileChildren(
  PsPsRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MsrRouteRoute: MsrRouteRoute,
  PsPsRouteRoute: PsPsRouteRouteWithChildren,
  HomeRoute: HomeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
