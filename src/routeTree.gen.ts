/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteImport } from './routes/home'
import { Route as PSysRouteRouteImport } from './routes/p-sys/route'
import { Route as MsrRouteRouteImport } from './routes/msr/route'
import { Route as PSysVendorAssignmentRouteImport } from './routes/p-sys/vendor-assignment'
import { Route as PSysPipsRouteImport } from './routes/p-sys/pips'
import { Route as PSysItemAssignmentRouteImport } from './routes/p-sys/item-assignment'
import { Route as MsrMsrUnitSelectorRouteImport } from './routes/msr/msr-unit-selector'
import { Route as MsrMilestoneRouteRouteImport } from './routes/msr/milestone/route'
import { Route as MsrMilestoneMSRMngCodeRouteImport } from './routes/msr/milestone/$MSRMngCode'

const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const PSysRouteRoute = PSysRouteRouteImport.update({
  id: '/p-sys',
  path: '/p-sys',
  getParentRoute: () => rootRouteImport,
} as any)
const MsrRouteRoute = MsrRouteRouteImport.update({
  id: '/msr',
  path: '/msr',
  getParentRoute: () => rootRouteImport,
} as any)
const PSysVendorAssignmentRoute = PSysVendorAssignmentRouteImport.update({
  id: '/vendor-assignment',
  path: '/vendor-assignment',
  getParentRoute: () => PSysRouteRoute,
} as any)
const PSysPipsRoute = PSysPipsRouteImport.update({
  id: '/pips',
  path: '/pips',
  getParentRoute: () => PSysRouteRoute,
} as any)
const PSysItemAssignmentRoute = PSysItemAssignmentRouteImport.update({
  id: '/item-assignment',
  path: '/item-assignment',
  getParentRoute: () => PSysRouteRoute,
} as any)
const MsrMsrUnitSelectorRoute = MsrMsrUnitSelectorRouteImport.update({
  id: '/msr-unit-selector',
  path: '/msr-unit-selector',
  getParentRoute: () => MsrRouteRoute,
} as any)
const MsrMilestoneRouteRoute = MsrMilestoneRouteRouteImport.update({
  id: '/milestone',
  path: '/milestone',
  getParentRoute: () => MsrRouteRoute,
} as any)
const MsrMilestoneMSRMngCodeRoute = MsrMilestoneMSRMngCodeRouteImport.update({
  id: '/$MSRMngCode',
  path: '/$MSRMngCode',
  getParentRoute: () => MsrMilestoneRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/msr': typeof MsrRouteRouteWithChildren
  '/p-sys': typeof PSysRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/msr/milestone': typeof MsrMilestoneRouteRouteWithChildren
  '/msr/msr-unit-selector': typeof MsrMsrUnitSelectorRoute
  '/p-sys/item-assignment': typeof PSysItemAssignmentRoute
  '/p-sys/pips': typeof PSysPipsRoute
  '/p-sys/vendor-assignment': typeof PSysVendorAssignmentRoute
  '/msr/milestone/$MSRMngCode': typeof MsrMilestoneMSRMngCodeRoute
}
export interface FileRoutesByTo {
  '/msr': typeof MsrRouteRouteWithChildren
  '/p-sys': typeof PSysRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/msr/milestone': typeof MsrMilestoneRouteRouteWithChildren
  '/msr/msr-unit-selector': typeof MsrMsrUnitSelectorRoute
  '/p-sys/item-assignment': typeof PSysItemAssignmentRoute
  '/p-sys/pips': typeof PSysPipsRoute
  '/p-sys/vendor-assignment': typeof PSysVendorAssignmentRoute
  '/msr/milestone/$MSRMngCode': typeof MsrMilestoneMSRMngCodeRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/msr': typeof MsrRouteRouteWithChildren
  '/p-sys': typeof PSysRouteRouteWithChildren
  '/home': typeof HomeRoute
  '/msr/milestone': typeof MsrMilestoneRouteRouteWithChildren
  '/msr/msr-unit-selector': typeof MsrMsrUnitSelectorRoute
  '/p-sys/item-assignment': typeof PSysItemAssignmentRoute
  '/p-sys/pips': typeof PSysPipsRoute
  '/p-sys/vendor-assignment': typeof PSysVendorAssignmentRoute
  '/msr/milestone/$MSRMngCode': typeof MsrMilestoneMSRMngCodeRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/msr'
    | '/p-sys'
    | '/home'
    | '/msr/milestone'
    | '/msr/msr-unit-selector'
    | '/p-sys/item-assignment'
    | '/p-sys/pips'
    | '/p-sys/vendor-assignment'
    | '/msr/milestone/$MSRMngCode'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/msr'
    | '/p-sys'
    | '/home'
    | '/msr/milestone'
    | '/msr/msr-unit-selector'
    | '/p-sys/item-assignment'
    | '/p-sys/pips'
    | '/p-sys/vendor-assignment'
    | '/msr/milestone/$MSRMngCode'
  id:
    | '__root__'
    | '/msr'
    | '/p-sys'
    | '/home'
    | '/msr/milestone'
    | '/msr/msr-unit-selector'
    | '/p-sys/item-assignment'
    | '/p-sys/pips'
    | '/p-sys/vendor-assignment'
    | '/msr/milestone/$MSRMngCode'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  MsrRouteRoute: typeof MsrRouteRouteWithChildren
  PSysRouteRoute: typeof PSysRouteRouteWithChildren
  HomeRoute: typeof HomeRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/p-sys': {
      id: '/p-sys'
      path: '/p-sys'
      fullPath: '/p-sys'
      preLoaderRoute: typeof PSysRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/msr': {
      id: '/msr'
      path: '/msr'
      fullPath: '/msr'
      preLoaderRoute: typeof MsrRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/p-sys/vendor-assignment': {
      id: '/p-sys/vendor-assignment'
      path: '/vendor-assignment'
      fullPath: '/p-sys/vendor-assignment'
      preLoaderRoute: typeof PSysVendorAssignmentRouteImport
      parentRoute: typeof PSysRouteRoute
    }
    '/p-sys/pips': {
      id: '/p-sys/pips'
      path: '/pips'
      fullPath: '/p-sys/pips'
      preLoaderRoute: typeof PSysPipsRouteImport
      parentRoute: typeof PSysRouteRoute
    }
    '/p-sys/item-assignment': {
      id: '/p-sys/item-assignment'
      path: '/item-assignment'
      fullPath: '/p-sys/item-assignment'
      preLoaderRoute: typeof PSysItemAssignmentRouteImport
      parentRoute: typeof PSysRouteRoute
    }
    '/msr/msr-unit-selector': {
      id: '/msr/msr-unit-selector'
      path: '/msr-unit-selector'
      fullPath: '/msr/msr-unit-selector'
      preLoaderRoute: typeof MsrMsrUnitSelectorRouteImport
      parentRoute: typeof MsrRouteRoute
    }
    '/msr/milestone': {
      id: '/msr/milestone'
      path: '/milestone'
      fullPath: '/msr/milestone'
      preLoaderRoute: typeof MsrMilestoneRouteRouteImport
      parentRoute: typeof MsrRouteRoute
    }
    '/msr/milestone/$MSRMngCode': {
      id: '/msr/milestone/$MSRMngCode'
      path: '/$MSRMngCode'
      fullPath: '/msr/milestone/$MSRMngCode'
      preLoaderRoute: typeof MsrMilestoneMSRMngCodeRouteImport
      parentRoute: typeof MsrMilestoneRouteRoute
    }
  }
}

interface MsrMilestoneRouteRouteChildren {
  MsrMilestoneMSRMngCodeRoute: typeof MsrMilestoneMSRMngCodeRoute
}

const MsrMilestoneRouteRouteChildren: MsrMilestoneRouteRouteChildren = {
  MsrMilestoneMSRMngCodeRoute: MsrMilestoneMSRMngCodeRoute,
}

const MsrMilestoneRouteRouteWithChildren =
  MsrMilestoneRouteRoute._addFileChildren(MsrMilestoneRouteRouteChildren)

interface MsrRouteRouteChildren {
  MsrMilestoneRouteRoute: typeof MsrMilestoneRouteRouteWithChildren
  MsrMsrUnitSelectorRoute: typeof MsrMsrUnitSelectorRoute
}

const MsrRouteRouteChildren: MsrRouteRouteChildren = {
  MsrMilestoneRouteRoute: MsrMilestoneRouteRouteWithChildren,
  MsrMsrUnitSelectorRoute: MsrMsrUnitSelectorRoute,
}

const MsrRouteRouteWithChildren = MsrRouteRoute._addFileChildren(
  MsrRouteRouteChildren,
)

interface PSysRouteRouteChildren {
  PSysItemAssignmentRoute: typeof PSysItemAssignmentRoute
  PSysPipsRoute: typeof PSysPipsRoute
  PSysVendorAssignmentRoute: typeof PSysVendorAssignmentRoute
}

const PSysRouteRouteChildren: PSysRouteRouteChildren = {
  PSysItemAssignmentRoute: PSysItemAssignmentRoute,
  PSysPipsRoute: PSysPipsRoute,
  PSysVendorAssignmentRoute: PSysVendorAssignmentRoute,
}

const PSysRouteRouteWithChildren = PSysRouteRoute._addFileChildren(
  PSysRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  MsrRouteRoute: MsrRouteRouteWithChildren,
  PSysRouteRoute: PSysRouteRouteWithChildren,
  HomeRoute: HomeRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

